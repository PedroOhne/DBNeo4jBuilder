/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.master.neo4jdbbuilder;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.SortedSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

/**
 *
 * @author benfrenco
 */
class ParserBoxInstanzFirst {

    ArrayList<Parser_Info> alle_parser = new ArrayList();

    public ParserBoxInstanzFirst() throws FileNotFoundException, IOException {

        String sym = Tools.OSValidator();
        String rel_path = Tools.CurrenDirectory();
        String file_path = rel_path + sym + Properties.basic_path_database + sym + Properties.basic_path_parser_settings;
        try (BufferedReader br = new BufferedReader(new FileReader(new File(file_path)))) {
            Iterator<String> iterator = br.lines().iterator();
            while (iterator.hasNext()) {
                String[] line_parser_infos = iterator.next().split("\\$");
                Parser_Info parser_Info = new Parser_Info(line_parser_infos[2], line_parser_infos[0], line_parser_infos[1]);
                if (line_parser_infos[0].equals("F.A.E.R.S Parser")) {
                    Tools.checkContent(parser_Info);
                }
                alle_parser.add(parser_Info);
            }
            br.close();
        }
    }

    public ArrayList<Parser_Info> getAlle_parser() {
        return alle_parser;
    }

    public void setAlle_parser(ArrayList<Parser_Info> alle_parser) {
        this.alle_parser = alle_parser;
    }

}

final class GuiParentMain {

    public GuiParentMain(String title) throws HeadlessException {

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                JFrame jf = new JFrame(title);
                int height = 750;
                int width = 1200;
                jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                jf.setSize(width, height);

                try {
                    GuiMain gm = new GuiMain();
                    jf.add(gm);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(GuiParentMain.class.getName()).log(Level.SEVERE, null, ex);
                }

                jf.setLocationRelativeTo(jf);
                jf.setResizable(false);
                jf.setVisible(true);
            }
        });

    }
}

public class GuiMain extends javax.swing.JPanel {

    PreProcessorYCS_F pp_ycs;

    public void init() throws IOException {
        ParserBoxInstanzFirst pbif = new ParserBoxInstanzFirst();
        ArrayList<Parser_Info> alle_parser = pbif.getAlle_parser();
        DefaultComboBoxModel dmd = new DefaultComboBoxModel<Parser_Info>();
        for (int i = 0; i < alle_parser.size(); i++) {
            Parser_Info p = alle_parser.get(i);
            dmd.addElement(p);
        }
        jComboBox1.setModel(dmd);
        descriptionAREA.setLineWrap(true);
        descriptionAREA.setWrapStyleWord(true);
        pi = (Parser_Info) jComboBox1.getSelectedItem();
        descriptionAREA.setText(pi.getDesc());
        labelSOURCE.setText(pi.getOrigin_url());
        initNiceLook();
    }

    /**
     * Creates new form GuiMain
     */
    public GuiMain() throws MalformedURLException {

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                initComponents();
                try {
                    init();
                } catch (IOException ex) {
                    Logger.getLogger(GuiMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        NEWPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<Parser_Info>();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionAREA = new javax.swing.JTextArea();
        labelSOURCE = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        filesLISTE = new javax.swing.JList<>();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        overviewLIST = new javax.swing.JList<>();
        jButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        progress_Info = new javax.swing.JLabel();
        progress_STEP = new javax.swing.JLabel();
        progress_STATE = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        progress_AREA = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        field_db_name = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        pathLABEL = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        downloadLABEL = new javax.swing.JLabel();
        SEARCHPanel = new javax.swing.JPanel();

        setOpaque(false);

        NEWPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true), "Select Parser", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica", 1, 13))); // NOI18N

        jLabel3.setText("Parser:");

        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Source:");

        jLabel5.setText("Description:");

        descriptionAREA.setBackground(java.awt.SystemColor.window);
        descriptionAREA.setColumns(20);
        descriptionAREA.setRows(5);
        descriptionAREA.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        descriptionAREA.setEnabled(false);
        jScrollPane2.setViewportView(descriptionAREA);

        labelSOURCE.setText("Source");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 1, Short.MAX_VALUE)
                                .addComponent(labelSOURCE, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(labelSOURCE, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true), "Parser Files", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica", 1, 13)))); // NOI18N

        jLabel8.setText("Files:");

        filesLISTE.setModel(dmd_a);
        jScrollPane3.setViewportView(filesLISTE);

        jButton3.setText("Add");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true), "Overview", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica", 1, 13))); // NOI18N

        jScrollPane4.setViewportView(overviewLIST);

        jButton4.setText("Start");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true), "Progress", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica", 1, 13))); // NOI18N

        progress_Info.setText("Step:");

        progress_AREA.setColumns(20);
        progress_AREA.setRows(5);
        jScrollPane5.setViewportView(progress_AREA);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progress_Info)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addComponent(progress_STATE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progress_STEP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(progress_Info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progress_STEP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progress_STATE, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true), "Generall Settings", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica", 1, 13))); // NOI18N

        jLabel2.setText("Name:");

        jLabel1.setText("Description:");

        field_db_name.setSize(new java.awt.Dimension(85, 26));
        field_db_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                field_db_nameActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBounds(new java.awt.Rectangle(0, 0, 240, 77));
        jScrollPane1.setViewportView(jTextArea1);

        pathLABEL.setText("Path");
        pathLABEL.setRequestFocusEnabled(false);

        jButton5.setText("Location");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton2.setText("Download");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        downloadLABEL.setText("Path");
        downloadLABEL.setEnabled(false);
        downloadLABEL.setFocusable(false);
        downloadLABEL.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pathLABEL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(field_db_name)
                    .addComponent(downloadLABEL, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(field_db_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(pathLABEL, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(downloadLABEL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        javax.swing.GroupLayout NEWPanelLayout = new javax.swing.GroupLayout(NEWPanel);
        NEWPanel.setLayout(NEWPanelLayout);
        NEWPanelLayout.setHorizontalGroup(
            NEWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NEWPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NEWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NEWPanelLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NEWPanelLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        NEWPanelLayout.setVerticalGroup(
            NEWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NEWPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(NEWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(NEWPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Management -Database-", NEWPanel);

        javax.swing.GroupLayout SEARCHPanelLayout = new javax.swing.GroupLayout(SEARCHPanel);
        SEARCHPanel.setLayout(SEARCHPanelLayout);
        SEARCHPanelLayout.setHorizontalGroup(
            SEARCHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1160, Short.MAX_VALUE)
        );
        SEARCHPanelLayout.setVerticalGroup(
            SEARCHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 656, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Search Function", SEARCHPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Preferences pref = Preferences.userRoot();
        String path = pref.get("DOWNLOAD_PATH", "");
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Wähle Pfad aus");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setCurrentDirectory(new File(path));
        int result = chooser.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            downloadLABEL.setText(chooser.getSelectedFile().getPath());
            File f = chooser.getCurrentDirectory();
            pref.put("DOWNLOAD_PATH", f.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        Preferences pref = Preferences.userRoot();
        String path = pref.get("OUTPUT_PATH", "");
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Wähle Pfad aus");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setCurrentDirectory(new File(path));
        int result = chooser.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            pathLABEL.setText(chooser.getSelectedFile().getPath());
            File f = chooser.getCurrentDirectory();
            pref.put("OUTPUT_PATH", f.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void field_db_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_field_db_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_field_db_nameActionPerformed

    public class Worker extends SwingWorker<String, String> {

        @Override
        protected String doInBackground() throws Exception {
            //This is what's called in the .execute method
            for (int i = 0; i < 10; i++) {
                //This sends the results to the .process method
                publish(String.valueOf(i));
                Thread.sleep(1000);
            }
            return null;
        }

        protected void process(List<String> item) {
            //This updates the UI
            progress_AREA.append(item + "\n");
        }
    }

    static String output_folder = "";
    static String download_folder = "";
    static String db_path = "";
    static String db_name = "";

    static String folder_canada_after_extraction = "";

    /**
     * Start download, extraction, integration.
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        output_folder = pathLABEL.getText();
        download_folder = downloadLABEL.getText();
        db_name = field_db_name.getText();
        db_path = output_folder + Tools.OSValidator() + db_name;
        File f = new File(db_path);

        PreProcessorUS_F p_usa = new PreProcessorUS_F();

        HashSet<String> downloaded_zips = new HashSet<>();
        ArrayList<String> files_usa = new ArrayList<>();

        ListModel<Parser_File_Overview> model = overviewLIST.getModel();
        int size = model.getSize();
        for (int i = 0; i < size; i++) {
            Parser_File_Overview elementAt = model.getElementAt(i);
            ArrayList<Parser_File_Entry> p_infos = elementAt.getP_infos();
            for (Parser_File_Entry p_info : p_infos) {
                System.out.println(p_info.getUrl());
                String url = p_info.getUrl();
                String d_file = download_folder + Tools.OSValidator()
                        + p_info.getName() + ".zip";
                if (p_info.getUrl().contains(Properties.canada_url_check)) {
                    try {
                        Tools.doDownload(p_info.getDownload_url(), d_file);
                        downloaded_zips.add(d_file);
                    } catch (IOException ex) {
                    }
                } else if (p_info.getUrl().contains("info.mhra")) {
                    PreProcessorYCS_F pycs = new PreProcessorYCS_F(f, p_info.getUrl(),
                            download_folder, output_folder);
                    try {
                        new WorkerYCS(pycs).execute();
                    } catch (IOException ex) {
                        Logger.getLogger(GuiMain.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    String kind_year = p_info.getName();
                    if (!kind_year.equals("")) {
                        files_usa.add(kind_year.substring(2).toUpperCase());
                        try {
                            p_usa.downloadFileToDestination(p_info.getUrl(), d_file);
                            p_usa.extractFileAfterDownload(d_file, download_folder);
                        } catch (IOException ex) {
                            Logger.getLogger(GuiMain.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }

        System.out.println(files_usa.size());

        try {
            WorkerUSA w_usa = new WorkerUSA(p_usa, files_usa, f);
            w_usa.execute();
        } catch (IOException ex) {
            Logger.getLogger(GuiMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(GuiMain.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.out.println("END.");

//
//        SwingUtilities.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                ListModel<Parser_File_Overview> model = overviewLIST.getModel();
//                int size = model.getSize();
//                for (int i = 0; i < size; i++) {
//                    Parser_File_Overview elementAt = model.getElementAt(i);
//                    ArrayList<Parser_File_Entry> p_infos = elementAt.getP_infos();
//                    for (Parser_File_Entry p_info : p_infos) {
//                        System.out.println(p_info.getUrl());
//                        String url = p_info.getUrl();
//                        String d_file = download_folder + Tools.OSValidator()
//                                + p_info.getName() + ".zip";
//                        if (p_info.getUrl().contains(Properties.canada_url_check)) {
//                            try {
//                                Tools.doDownload(p_info.getDownload_url(), d_file);
//                                downloaded_zips.add(d_file);
//                            } catch (IOException ex) {
//                            }
//                        } else if (p_info.getUrl().contains("info.mhra")) {
//                            pp_ycs = new PreProcessorYCS_F(f, p_info.getUrl(),
//                                    download_folder, output_folder);
//
//                        } else {
//                            String kind_year = p_info.getName();
//                            if (!kind_year.equals("")) {
//                                files_usa.add(kind_year.substring(2).toUpperCase());
//                                try {
//                                    p_usa.downloadFileToDestination(p_info.getUrl(), d_file);
//                                    p_usa.extractFileAfterDownload(d_file, download_folder);
//                                } catch (IOException ex) {
//                                    Logger.getLogger(GuiMain.class.getName()).log(Level.SEVERE, null, ex);
//                                }
//                            }
//                        }
//
//                    }
//                }
//            }
//        });
//        SwingUtilities.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                for (String downloaded_zip : downloaded_zips) {
//                    String unZipIt = Tools.unZipItCanada(downloaded_zip, download_folder);
//                    folder_canada_after_extraction = unZipIt;
//                }
//            }
//        });
//
//        SwingUtilities.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    PreProcessorCanada_F pfff = new PreProcessorCanada_F(f, download_folder, folder_canada_after_extraction);
//                } catch (IOException ex) {
//                    Logger.getLogger(GuiMain.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });

    }//GEN-LAST:event_jButton4ActionPerformed

    public class WorkerUSA extends SwingWorker<String, String> {

        PreProcessorUS_F p_usa;
        ArrayList<String> files_usa;
        File f;

        public WorkerUSA(PreProcessorUS_F a, ArrayList<String> filess, File f) throws IOException {
            this.p_usa = a;
            this.files_usa = filess;
            this.f = f;
        }

        @Override
        protected String doInBackground() throws Exception {

            String next = files_usa.get(0);
            SortedSet<String> initializePathsAfterDownload = p_usa.initializePathsAfterDownload(download_folder
                    + Tools.OSValidator() + "ascii" + Tools.OSValidator(), next);

            if (next.equals("14Q2")) {
                p_usa.PreProcessorUS_F_14Q2(f, initializePathsAfterDownload, 2);
                HashSet<USgenerellNode> receiveMapInternNodes = p_usa.receiveMapInternNodes();
                Iterator<USgenerellNode> iterator1 = receiveMapInternNodes.iterator();
                while (iterator1.hasNext()) {
                    String ProcessOneNode = p_usa.ProcessOneNode(iterator1.next());
                    publish(ProcessOneNode);
                }
                files_usa.remove(next);
                if (!files_usa.isEmpty()) {
                    publish("DONE.");
                    WorkerUSA wUSA = new WorkerUSA(p_usa, files_usa, f);
                    wUSA.execute();
                }
            } else {
                p_usa.PreProcessorUS_F_14Q2(f, initializePathsAfterDownload, 1);
                HashSet<USgenerellNode> receiveMapInternNodes = p_usa.receiveMapInternNodes();
                Iterator<USgenerellNode> iterator1 = receiveMapInternNodes.iterator();
                while (iterator1.hasNext()) {
                    String ProcessOneNode = p_usa.ProcessOneNode(iterator1.next());
                    publish(ProcessOneNode);
                }
                files_usa.remove(next);
                if (!files_usa.isEmpty()) {
                    publish("DONE.");
                    WorkerUSA wUSA = new WorkerUSA(p_usa, files_usa, f);
                    wUSA.execute();
                }
            }
            p_usa.closeDB();
            return null;
        }

        @Override
        protected void process(List<String> item
        ) {
            progress_AREA.setText(item.get(item.size() - 1) + "\n");
        }

    }

    public class WorkerYCS extends SwingWorker<String, String> {

        PreProcessorYCS_F ycs;
        HashMap<String, HashSet<String>> d_folders;

        public WorkerYCS(PreProcessorYCS_F a) throws IOException {
            this.ycs = a;
            d_folders = ycs.startPreProcessingAll();
        }

        @Override
        protected String doInBackground() throws Exception {

            //This is what's called in the .execute method
            for (String string : d_folders.keySet()) {
                String startIntegrateOneFolder = ycs.startIntegrateOneFolder(d_folders, string);
                publish(startIntegrateOneFolder);
            }
            ycs.closeDB();
            return null;
        }

        protected void process(List<String> item) {
            //This updates the UI
            progress_AREA.setText(item.get(item.size() - 1) + "\n");
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        ArrayList<Parser_File_Entry> alls = new ArrayList<>();
        List<Parser_File_Entry> selectedValuesList = filesLISTE.getSelectedValuesList();
        for (Parser_File_Entry parser_File_Entry : selectedValuesList) {
            String url = parser_File_Entry.getUrl();
            alls.add(parser_File_Entry);
        }
        Parser_File_Overview pfo = new Parser_File_Overview(pi.getName(), alls);
        dmd_o.addElement(pfo);
        overviewLIST.setModel(dmd_o);
        filesLISTE.setModel(dmd_empty);
        dmd_as = new HashSet<>();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Transfer intern FIles of Parser for Processing into filesLIST.
        filesLISTE.removeAll();
        dmd_a.clear();

        if (empty_set != null) {
            for (Parser_File_Entry all_url : empty_set.values()) {
                dmd_a.addElement(all_url);
            }
        }

        filesLISTE.setModel(dmd_a);
        int start = 0;
        int end = filesLISTE.getModel().getSize() - 1;
        if (end >= 0) {
            filesLISTE.setSelectionInterval(start, end);
        }

        empty_set.clear();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        parserItemChanged();
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    public void parserItemChanged() {
        empty_set.clear();
        Object item = jComboBox1.getSelectedItem();
        Parser_Info pp = (Parser_Info) item;
        pi = pp;
        descriptionAREA.setText(pp.getDesc());
        labelSOURCE.setText(pp.getOrigin_url());
        for (Parser_File_Entry all_url : pp.getAll_urls()) {
            if (empty_set.containsKey(all_url.getName())) {
            } else {
                empty_set.put(all_url.getName(), all_url);
            }
        }
    }

    static Parser_Info pi = null;
    static DefaultListModel dmd_empty = new DefaultListModel<Parser_File_Entry>();
    static DefaultListModel dmd_a = new DefaultListModel<Parser_File_Entry>();
    static DefaultListModel dmd_o = new DefaultListModel<Parser_File_Overview>();
    static HashSet<String> dmd_as = new HashSet<>();
    static HashMap<String, Parser_File_Entry> empty_set = new HashMap<>();

    void initNiceLook() {
        downloadLABEL.setFocusable(false);
        pathLABEL.setFocusable(false);
        parserItemChanged();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel NEWPanel;
    private javax.swing.JPanel SEARCHPanel;
    private javax.swing.JTextArea descriptionAREA;
    private javax.swing.JLabel downloadLABEL;
    private javax.swing.JTextField field_db_name;
    public javax.swing.JList<Parser_File_Entry> filesLISTE;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    public javax.swing.JComboBox<Parser_Info> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel labelSOURCE;
    public javax.swing.JList<Parser_File_Overview> overviewLIST;
    private javax.swing.JLabel pathLABEL;
    private javax.swing.JTextArea progress_AREA;
    private javax.swing.JLabel progress_Info;
    public static javax.swing.JLabel progress_STATE;
    private javax.swing.JLabel progress_STEP;
    // End of variables declaration//GEN-END:variables
}
